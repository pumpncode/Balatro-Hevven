[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# New/Edited functions used for Simple Tap and New Record
[[patches]]
[patches.copy]
target = "main.lua"
position = "append"
sources = [
	"misc/inject_functions.lua"
]

# Add a beat anim to the main menu
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "replace_card.states.visible = false"
position = "before"
payload = "rh_beat_anim(replace_card)"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
                    card:start_materialize()
                    self.title_top:emplace(card)'''
position = "after"
payload = "rh_beat_anim(card)"
match_indent = true

# All this stolen and slightly edited from Cryptid
# Pity Skip - don't lose
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.RESET_JIGGLES = true'''
position = 'after'
match_indent = true
payload = '''
if G.GAME.current_round.rh_flow_pity_skip then
    game_over = false
end
'''

# Some Good Parts - don't lose
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.RESET_JIGGLES = true'''
position = 'after'
match_indent = true
payload = '''
game_over = rh_flow_good_parts_save()
'''

# Some Good Parts - SFX
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''table.insert(left_text, {n=G.UIT.O, config={w=1.2,h=1.2 , object = blind_sprite, hover = true, can_collide = false}})'''
position = 'after'
match_indent = true
payload = '''
if G.GAME.current_round.rh_flow_good_parts_saved then
    play_sound('rh_some_good_parts', 1, 5)
end
'''

# Pity Skip - end screen text
[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''or 'ph_mr_bones'\)..' '}, colours = \{G.C.FILTER'''
position = 'at'
# match_indent = true
line_prepend = ''
payload = '''or rh_saved_run_text() or 'ph_mr_bones')..' '}, colours = {G.C.FILTER'''

# Pity Skip - polished UI
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''{n=G.UIT.T, config={text = localize('b_cash_out')..": ", scale = 1, colour = G.C.UI.TEXT_LIGHT, shadow = true}},'''
position = "at"
payload = '''{n=G.UIT.T, config={text = rh_saved_run_round_text(), scale = 1, colour = G.C.UI.TEXT_LIGHT, shadow = true}},'''
match_indent = true

# Pity Skip - polished UI
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''{n=G.UIT.T, config={text = localize('$')..format_ui_value(config.dollars), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = rh_saved_run_money_text(format_ui_value(config.dollars)), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}'''
match_indent = true

# Balatro Hevven - reset values at start of round
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.blind:set_blind(G.GAME.round_resets.blind)"
position = "after"
payload = '''
G.GAME.current_round.rh_flow_pity_skip = false
G.GAME.current_round.rh_flow_simple_tap = false
G.GAME.current_round.rh_flow_good_parts = false
G.GAME.current_round.rh_flow_good_parts_saved = false
G.GAME.current_round.rh_flow_new_record = false
G.GAME.current_round.rh_flow_new_record_to_beat = 0
G.GAME.current_round.rh_flow_new_record_tag = false
G.GAME.current_round.rh_flow_used = false
'''
match_indent = true

# New Record - Checks high score to deliver the rare tag
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "check_and_set_high_score('hand', hand_chips*mult)"
position = "before"
payload = '''
rh_flow_check_for_new_record(hand_chips*mult)
'''
match_indent = true

# You - Disables card from being discarded when played
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1'''
position = "at"
payload = '''
if v.ability["rh_you_sticker"] then
    draw_card(G.play,G.hand, it*100/play_count,'down', false, v)
    it = it + 1
else
    draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
    it = it + 1
end 
'''
match_indent = true

# You - Disables card from being discarded by player
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
    stop_use()
    G.CONTROLLER.interrupt.focus = true
    G.CONTROLLER:save_cardarea_focus('hand')
'''
position = "after"
payload = '''
for k, v in ipairs(G.hand.highlighted) do
    if v.ability["rh_you_sticker"] then
        G.hand:remove_from_highlighted(v, true)
    end
end
'''
match_indent = true

# You - highlights the You card again after play
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''to:emplace(card, nil, stay_flipped)'''
position = "after"
payload = '''
if card.ability["rh_you_sticker"] and to == G.hand then
    to:add_to_highlighted(card,false)
    card.ability.forced_selection = true
end
'''
match_indent = true

# You - highlights the You card again after discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- TARGET: effects after cards destroyed in discard'''
position = "before"
payload = '''
for k, v in pairs(G.playing_cards) do
    if v.ability["rh_you_sticker"] then 
        G.hand.highlighted[#G.hand.highlighted+1] = v
        v:highlight(true)
        v.ability.forced_selection = true
    end
end
'''
match_indent = true

# Call & Response - sort highlighted
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''G.boss_throw_hand = nil'''
position = "after"
payload = '''
self.highlighted = rh_sort_highlighted(self)
'''
match_indent = true

# Call & Response - calculate after drag
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''
function CardArea:update(dt)
    if self == G.hand then '''
position = "after"
payload = '''
if G.STATE == G.STATES.SELECTING_HAND then
    if not rh_is_equal_simple(G.GAME.current_round.rh_current_hand or {}, rh_simplify_cards(G.hand.cards)) then
        G.GAME.current_round.rh_current_hand = rh_simplify_cards(G.hand.cards)
        self:parse_highlighted()
        for i=1, #G.hand.cards do
            rh_debuff_call_response(G.hand.cards[i], from_blind)
        end 
     end
end
'''
match_indent = true

# Call & Response - Calculate Discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''SMODS.calculate_context({discard = true, other_card =  G.hand.highlighted[i], full_hand = G.hand.highlighted}, effects)'''
position = "at"
payload = '''
local other_card = G.hand.highlighted[i]
if other_card.ability.name == 'm_rh_call_response' then
    other_card = (rh_seek_copiable(true, G.hand.highlighted[i], G.hand.cards) or other_card)
end
SMODS.calculate_context({discard = true, other_card =  other_card, full_hand = G.hand.highlighted}, effects)
'''
match_indent = true

# Call & Response - get_X_same override kind of
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
if hand[i]:get_id() == hand[j]:get_id() and i ~= j then
  table.insert(curr, hand[j])
end'''
position = "at"
payload = '''
if hand[i]:get_id() == hand[j]:get_id() and i ~= j then
    table.insert(curr, hand[j])
elseif hand[j].ability.name == 'm_rh_call_response' and i~=j and j~=1 then
    local added = false
    for k=j, 1, -1 do
        if hand[k].ability.name ~= 'm_rh_call_response' then
            if hand[i]:get_id() == hand[k]:get_id()then
                table.insert(curr, hand[k])
            end
            break
        end
    end
end
'''
match_indent = true

# Call & Response - get_flush override kind of
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''if hand[i]:is_suit(suit, nil, true) then flush_count = flush_count + 1;  t[#t+1] = hand[i] end '''
position = "at"
payload = '''
if hand[i]:is_suit(suit, nil, true) then
    flush_count = flush_count + 1
    t[#t+1] = hand[i]
elseif hand[i].ability.name == 'm_rh_call_response' then
    for j=i, 1, -1 do
        if hand[j].ability.name ~= 'm_rh_call_response' then
            if hand[j]:is_suit(suit, nil, true) then
                flush_count = flush_count + 1
                t[#t+1] = hand[j]
            end
            break
        end
    end
end
'''
match_indent = true

# Saffron's Trial - All rental
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if G.GAME.modifiers.all_eternal then
    card:set_eternal(true)
end
'''
position = "after"
payload = '''
if G.GAME.modifiers.all_rental then
    card:set_rental(true)
end
'''
match_indent = true

# Saffron's Trial - Start as rental
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if v.eternal then _joker:set_eternal(true) end'''
position = "after"
payload = '''if v.rental then _joker:set_rental(true) end'''
match_indent = true

# Saffron's Trial - Start as rental
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if v.eternal then card:set_eternal(true) end'''
position = "after"
payload = '''if v.rental then card:set_rental(true) end'''
match_indent = true