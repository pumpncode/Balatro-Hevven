[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Call & Response - sort highlighted
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''G.boss_throw_hand = nil'''
position = "after"
payload = '''
self.highlighted = rh_sort_highlighted(self)
'''
match_indent = true

# Call & Response - calculate after drag
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''
function CardArea:update(dt)
    if self == G.hand then '''
position = "after"
payload = '''
if G.STATE == G.STATES.SELECTING_HAND then
    if not rh_is_equal_simple(G.GAME.current_round.rh_current_hand or {}, rh_simplify_cards(G.hand.cards)) then
        G.GAME.current_round.rh_current_hand = rh_simplify_cards(G.hand.cards)
        self:parse_highlighted()
        for i=1, #G.hand.cards do
            rh_debuff_call_response(G.hand.cards[i], from_blind)
        end 
     end
end
'''
match_indent = true

# Call & Response - Calculate Discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''SMODS.calculate_context({discard = true, other_card =  G.hand.highlighted[i], full_hand = G.hand.highlighted}, effects)'''
position = "at"
payload = '''
local other_card = G.hand.highlighted[i]
if other_card.ability.name == 'm_rh_call_response' then
    other_card = (rh_seek_copiable(true, G.hand.highlighted[i], G.hand.cards) or other_card)
end
SMODS.calculate_context({discard = true, other_card =  other_card, full_hand = G.hand.highlighted}, effects)
'''
match_indent = true

# Call & Response - get_X_same override kind of
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
if hand[i]:get_id() == hand[j]:get_id() and i ~= j then
  table.insert(curr, hand[j])
end'''
position = "at"
payload = '''
if hand[i]:get_id() == hand[j]:get_id() and i ~= j then
    table.insert(curr, hand[j])
elseif hand[j].ability.name == 'm_rh_call_response' and i~=j and j~=1 then
    local added = false
    for k=j, 1, -1 do
        if hand[k].ability.name ~= 'm_rh_call_response' then
            if hand[i]:get_id() == hand[k]:get_id()then
                table.insert(curr, hand[k])
            end
            break
        end
    end
end
'''
match_indent = true

# Call & Response - get_flush override kind of
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''if hand[i]:is_suit(suit, nil, true) then flush_count = flush_count + 1;  t[#t+1] = hand[i] end '''
position = "at"
payload = '''
if hand[i]:is_suit(suit, nil, true) then
    flush_count = flush_count + 1
    t[#t+1] = hand[i]
elseif hand[i].ability.name == 'm_rh_call_response' then
    for j=i, 1, -1 do
        if hand[j].ability.name ~= 'm_rh_call_response' then
            if hand[j]:is_suit(suit, nil, true) then
                flush_count = flush_count + 1
                t[#t+1] = hand[j]
            end
            break
        end
    end
end
'''
match_indent = true